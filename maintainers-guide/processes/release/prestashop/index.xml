<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How to release a new PrestaShop version on PrestaShop Project - Open Source e-Commerce platform</title>
    <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/</link>
    <description>Recent content in How to release a new PrestaShop version on PrestaShop Project - Open Source e-Commerce platform</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preliminary tasks</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/preliminary-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/preliminary-tasks/</guid>
      <description>Preliminary tasks Before you can start your build, you must make sure that the project is ready to be built.
1. Make sure the version number has been updated in the Core This only needs to be done once per release.
PrestaShop does not support pre-release versioning yet. Any build of 1.7.6.0 will be identified as 1.7.6.0 regardless of whether the release is alpha, beta, RC, or stable.
 Check the following files and update them if necessary:</description>
    </item>
    
    <item>
      <title>Security patch releases</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/security/</guid>
      <description>Security patch releases Context In the past, we used to mix security fixes for major security issues and regular Pull Requests, but that made releasing new versions of PrestaShop harder. Today when there is a major security vulnerability reported, we fix it in a scoped security patch release which contains only the security fixes.
Examples: PrestaShop 8.1.6 or PrestaShop 8.1.4
For regular patch releases, we start from the content of the patch branch to create a new build.</description>
    </item>
    
    <item>
      <title>Create a new version branch</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/create-version-branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/create-version-branch/</guid>
      <description>Create a new branch for a new major/minor version. 1) Create the new branch and push it to the main repo Create the branch on you local git and push it to the main repository. You will need to push it to the main repository and not to your fork.
2) Open PRs based on the new branch and modify those files: To create the new branch, we need to update several repositories to complete the necessary work.</description>
    </item>
    
    <item>
      <title>Create the build</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/create-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/create-build/</guid>
      <description>Create a build package Once preliminary tasks have been completed, the project is ready to be built.
1. Communicate Starting this step means that the Development phase of this release is over.
Before you go further, make sure to tick the &amp;ldquo;Development&amp;rdquo; box in the Release Tracker GitHub issue (there is one per version, see the 1.7.6.6 example).
2. Create a local branch for your build The following tasks will require you to perform changes and submit them as a Pull Request.</description>
    </item>
    
    <item>
      <title>Release publicly</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/release-publicly/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/release-publicly/</guid>
      <description>Release the version publicly Once the QA team has greenlighted your build, you can move forward with the public release.
Make certain you have go for publish! Also, avoid starting this process after 4 PM or on a Friday. 1. Merge security PRs on GitHub If there are unmerged security PRs:
 Merge them on GitHub and publishing their security advisories. Rebase the build branch that you created on the previous step to remove the merge commits from the security PRs you merged manually before.</description>
    </item>
    
    <item>
      <title>Final steps</title>
      <link>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/final-steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.prestashop-project.org/maintainers-guide/processes/release/prestashop/final-steps/</guid>
      <description>Final steps 1. Update API stream for Update Assistant This should only be done for stable releases.
(i.e. if not for betas and RCs).
 Additional changes must be brought to the Distribution API repository to provide the best experience on the Update Assistant module:
 Add in the file releaseNotes.json the new version and the link to its release notes, Update the file autoupgrade.json to make the new release available for update.</description>
    </item>
    
  </channel>
</rss>
